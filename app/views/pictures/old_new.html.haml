- content_for :title do
  = @album.name
  = "::"
  = t('new_picture')

.container
  %h1= t('new_picture')
  %p= t('new_picture_explanation')

  #progress.progress.progress-striped.active
    .bar.progress-bar-success
  %span.btn.btn-success.fileinput-button
    %i.fa.fa-plus
    %span Add files...
    %input#fileupload{:multiple => "multiple", :name => "pictures[]", :type => "file"}
  %br
  %br
  #files.files

:javascript
  $(function () {
      'use strict';
      // Change this to the location of your server-side upload handler:
      var url = "#{album_pictures_path(album: @album)}",
          uploadButton = $('<button/>')
              .addClass('btn btn-primary')
              .prop('disabled', true)
              .text('Processing...')
              .on('click', function () {
                  var $this = $(this),
                      data = $this.data();
                  $this
                      .off('click')
                      .text('Abort')
                      .on('click', function () {
                          $this.remove();
                          data.abort();
                      });
                  data.submit().always(function () {
                      $this.remove();
                  });
              });
      $('#fileupload').fileupload({
          url: url,
          dataType: 'json',
          autoUpload: false,
          acceptFileTypes: /(\.|\/)(jpe?g)$/i,
          maxFileSize: 10000000,
          disableImageResize: /Android(?!.*Chrome)|Opera/
              .test(window.navigator.userAgent),
          previewMaxWidth: 100,
          previewMaxHeight: 100,
          previewCrop: true
      }).on('fileuploadadd', function (e, data) {
          data.context = $('<div/>').appendTo('#files');
          $.each(data.files, function (index, file) {
              var node = $('<p/>')
                      .append($('<span/>').text(file.name));
              if (!index) {
                  node
                      .append('<br>')
                      .append(uploadButton.clone(true).data(data));
              }
              node.appendTo(data.context);
          });
      }).on('fileuploadprocessalways', function (e, data) {
          var index = data.index,
              file = data.files[index],
              node = $(data.context.children()[index]);
          if (file.preview) {
              node
                  .prepend('<br>')
                  .prepend(file.preview);
          }
          if (file.error) {
              node
                  .append('<br>')
                  .append($('<div class="alert alert-error"/>').text(file.error));
          }
          if (index + 1 === data.files.length) {
              data.context.find('button')
                  .text('Upload')
                  .prop('disabled', !!data.files.error);
          }
      }).on('fileuploadprogressall', function (e, data) {
          var progress = parseInt(data.loaded / data.total * 100, 10);
          $('#progress .bar').css(
              'width',
              progress + '%'
          );
      }).on('fileuploaddone', function (e, data) {
          if(data.result) {
            var link = $('<a>')
              .attr('target', '_blank')
              .prop('href', '/albums/' + data.result.album_id + '/pictures/' + data.result.id);
            $(data.context.children()).wrap(link);
          }
      }).on('fileuploadfail', function (e, data) {
          $.each(data.files, function (index) {
              var error = $('<div class="alert alert-danger"/>').text('File upload failed.');
              $(data.context.children()[index])
                  .append('<br>')
                  .append(error);
          });
      }).prop('disabled', !$.support.fileInput)
          .parent().addClass($.support.fileInput ? undefined : 'disabled');
  });
